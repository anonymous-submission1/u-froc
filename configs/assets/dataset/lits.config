from functools import partial

import numpy as np
from sklearn.model_selection import train_test_split
from dpipe.dataset.wrappers import apply, cache_methods

from ufroc.dataset.lits import LiTS, CropToLiver
from ufroc.dataset.gamma_knife import Rescale3D, TumorCenters
from ufroc.dataset.utils import scale_ct, get_n_tumors


# if `voxel_spacing[i]` is `None` when `i`-th dimension will be used without scaling
# voxel_spacing = (None, None, None)
voxel_spacing = (0.7675781, 0.7675781, 1.0)  # median spacing

# Liver window standard values:
window_level = 50
window_width = 400
scale_ct_ = partial(scale_ct, min_value=window_level - window_width // 2, max_value=window_level + window_width // 2)

dataset = apply(cache_methods(apply(
    apply(TumorCenters(Rescale3D(CropToLiver(LiTS()), voxel_spacing)), load_image=scale_ct_),
    load_image=np.float16, load_segm=np.bool_), maxsize=800), load_image=np.float32, load_segm=np.float32)

n_tumors = get_n_tumors(dataset, train_ids)


def lits_train_val_test_split(df, _val_size, _seed):
    # ---> df['n_tumors'] == 0 only for batch_id 2
    # ---> we use df['n_tumors'] == 0 in LiTS_mod
    _test_ids = df[(df['batch_id'] == 1)].index.tolist()
    _train_val_ids = df[(df['batch_id'] == 2) & (df['n_tumors'] > 0)].index.tolist()
    _train_ids, _val_ids = train_test_split(_train_val_ids, test_size=_val_size, random_state=_seed)
    return [[_train_ids, _val_ids, _test_ids]]


val_size = 3

split_seed = seed
split = lits_train_val_test_split(df=dataset.df, _val_size=val_size, _seed=split_seed)

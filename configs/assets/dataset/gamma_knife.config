import numpy as np
from sklearn.model_selection import train_test_split
from dpipe.dataset.wrappers import apply, cache_methods

from ufroc.dataset.gamma_knife import GammaKnife, Rescale3D, TumorCenters
from ufroc.dataset.utils import scale_mri, get_n_tumors


# if `voxel_spacing[i]` is `None` when `i`-th dimension will be used without scaling
# voxel_spacing = (None, None, None)
voxel_spacing = (1., 1., 1.)

dataset = apply(cache_methods(apply(
    apply(TumorCenters(Rescale3D(GammaKnife(), voxel_spacing)), load_image=scale_mri),
    load_image=np.float16, load_segm=np.bool_)), load_image=np.float32, load_segm=np.float32)

n_tumors = get_n_tumors(dataset, train_ids)


def gamma_knife_train_val_test_split(df, _val_size, test_size, _seed):
    is_train = df['code'].apply(lambda x: x == 'bg').values
    df_train, df_test = df[is_train], df[~is_train]

    _train_ids, _test_ids = train_test_split(df_train.index.tolist(), test_size=test_size, random_state=_seed)
    _train_ids, _val_ids = train_test_split(_train_ids, test_size=_val_size, random_state=_seed)
    _test_ids = _test_ids + df_test.index.tolist()

    return [[_train_ids, _val_ids, _test_ids]]


val_size = 5

split_seed = seed
split = gamma_knife_train_val_test_split(df=dataset.df, _val_size=val_size, test_size=0.2, _seed=split_seed)

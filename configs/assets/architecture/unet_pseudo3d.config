import numpy as np
import torch

from dpipe.predict import add_extract_dims, divisible_shape
from dpipe.torch import inference_step
from dpipe.predict.shape import patches_grid
from dpipe.train import Schedule

from ufroc.torch.module.unet_pseudo3d import UNet
from ufroc.torch.functional import small_target_segm_loss


# loss

criterion = small_target_segm_loss

# model
architecture = UNet()
z_patch_size = 64
batch_size = 2
amp = False

# optimizer
batches_per_epoch = 1000
n_epochs = 30
lr_init = 1e-3
lr = Schedule(initial=lr_init, epoch2value_multiplier={25: 0.1, })
weight_decay = 1e-4
optimizer = torch.optim.SGD(architecture.parameters(), lr=lr_init, momentum=0.9, nesterov=True,
                            weight_decay=weight_decay)

# predict


@add_extract_dims(2)  # 3D -> (5D -> predict -> 5D) -> 3D
@patches_grid(z_patch_size, z_patch_size, axis=-1)  # image -> iter{patches} -> average
@divisible_shape(divisor=z_patch_size, padding_values=np.min, axis=-1)
def predict(image):
    return inference_step(image, architecture=architecture, activation=torch.sigmoid, amp=amp)


@add_extract_dims(2)  # 3D -> (5D -> predict -> 5D) -> 3D
@patches_grid(z_patch_size, z_patch_size, axis=-1)  # image -> iter{patches} -> average
@divisible_shape(divisor=z_patch_size, padding_values=np.min, axis=-1)
def predict_logit(x):
    return inference_step(x, architecture=architecture, amp=amp)

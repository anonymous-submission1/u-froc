from functools import partial

import numpy as np
from dpipe.batch_iter import Infinite, load_by_random_id, multiply
from dpipe.im.utils import prepend_dims

from ufroc.batch_iter.pipeline import center_choice_ts, extract_patch


# batch iter:
random_state = np.random.RandomState(seed)
nonzero_fraction = 0.75
weights = n_tumors / np.sum(n_tumors)

batch_iter = Infinite(
    load_by_random_id(load_x, load_y, dataset.load_tumor_centers,
                      ids=train_ids, weights=weights, random_state=random_state),
    partial(center_choice_ts, y_patch_size=y_patch_size, random_state=random_state, nonzero_fraction=nonzero_fraction,
            center_random_shift=y_patch_size // 2 - 1),
    partial(extract_patch, patch_sizes=[x_patch_size, y_patch_size], padding_values=[np.min, 0]),
    multiply(func=prepend_dims),

    batch_size=batch_size, batches_per_epoch=batches_per_epoch
)

import numpy as np
from dpipe.dataset.wrappers import apply, cache_methods
from dpipe.split.cv import stratified_train_val_test_split

from ufroc.dataset.lidc import LIDC, CropToLungs
from ufroc.dataset.gamma_knife import Rescale3D, TumorCenters
from ufroc.dataset.utils import scale_ct, get_n_tumors


# if `voxel_spacing[i]` is `None` when `i`-th dimension will be used without scaling
# voxel_spacing = (None, None, None)
voxel_spacing = (1., 1., 1.5)

dataset = apply(cache_methods(apply(
    # apply(TumorCenters(CropToLungs(Rescale3D(LIDC(), voxel_spacing))), load_image=scale_mri),
    apply(TumorCenters(Rescale3D(CropToLungs(LIDC()), voxel_spacing)), load_image=scale_ct),
    load_image=np.float16, load_segm=np.bool_), maxsize=800), load_image=np.float32, load_segm=np.float32)

n_tumors = get_n_tumors(dataset, train_ids)


def lidc_train_val_test_split(df, _val_size, _seed):  # 80 : 20
    return stratified_train_val_test_split(ids=df.index.tolist(), labels=df['n_tumors'].values.tolist(),
                                           val_size=_val_size, n_splits=5, random_state=_seed)[:1]


val_size = 5

split_seed = seed
split = lidc_train_val_test_split(df=dataset.df, _val_size=val_size, _seed=split_seed)
